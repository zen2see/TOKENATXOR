/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenatxorGameFacetInterface extends ethers.utils.Interface {
  functions: {
    "availableSkillPoints(uint256)": FunctionFragment;
    "baseRarityScore(int16[6])": FunctionFragment;
    "claimTokenatxor(uint256,uint256,uint256)": FunctionFragment;
    "currentProduction()": FunctionFragment;
    "getNumericTraits(uint256)": FunctionFragment;
    "interact(uint256[])": FunctionFragment;
    "modifiedTraitsAndRarityScore(uint256)": FunctionFragment;
    "productionTokenatxorTraits(uint256)": FunctionFragment;
    "rarityMultiplier(int16[6])": FunctionFragment;
    "revenueShares()": FunctionFragment;
    "setTokenatxorName(uint256,string)": FunctionFragment;
    "spendSkillPoints(uint256,int16[4])": FunctionFragment;
    "tktrAddress()": FunctionFragment;
    "tokenIdsWithWisdom(address,uint256,uint256,bool)": FunctionFragment;
    "tokenatxorNameAvailable(string)": FunctionFragment;
    "tokenatxorPowerLevel(uint256)": FunctionFragment;
    "wisdom(uint256)": FunctionFragment;
    "xpUntilNextPowerLevel(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableSkillPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseRarityScore",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenatxor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentProduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumericTraits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interact",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "modifiedTraitsAndRarityScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productionTokenatxorTraits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityMultiplier",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenatxorName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "spendSkillPoints",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tktrAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsWithWisdom",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenatxorNameAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenatxorPowerLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wisdom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xpUntilNextPowerLevel",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableSkillPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRarityScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenatxor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumericTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "interact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifiedTraitsAndRarityScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productionTokenatxorTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rarityMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenatxorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendSkillPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tktrAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsWithWisdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenatxorNameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenatxorPowerLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wisdom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xpUntilNextPowerLevel",
    data: BytesLike
  ): Result;

  events: {
    "ClaimTokenatxor(uint256)": EventFragment;
    "LockTokenatxor(uint256,uint256)": EventFragment;
    "SetBatchId(uint256,uint256[])": EventFragment;
    "SetTokenatxorName(uint256,string,string)": EventFragment;
    "SpendSkillpoints(uint256,int16[4])": EventFragment;
    "UnLockTokenatxor(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimTokenatxor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockTokenatxor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBatchId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenatxorName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpendSkillpoints"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnLockTokenatxor"): EventFragment;
}

export type ClaimTokenatxorEvent = TypedEvent<
  [BigNumber] & { _tokenId: BigNumber }
>;

export type LockTokenatxorEvent = TypedEvent<
  [BigNumber, BigNumber] & { _tokenId: BigNumber; _time: BigNumber }
>;

export type SetBatchIdEvent = TypedEvent<
  [BigNumber, BigNumber[]] & { _batchId: BigNumber; tokenIds: BigNumber[] }
>;

export type SetTokenatxorNameEvent = TypedEvent<
  [BigNumber, string, string] & {
    _tokenId: BigNumber;
    _oldName: string;
    _newName: string;
  }
>;

export type SpendSkillpointsEvent = TypedEvent<
  [BigNumber, [number, number, number, number]] & {
    _tokenId: BigNumber;
    _values: [number, number, number, number];
  }
>;

export type UnLockTokenatxorEvent = TypedEvent<
  [BigNumber, BigNumber] & { _tokenId: BigNumber; _time: BigNumber }
>;

export class TokenatxorGameFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenatxorGameFacetInterface;

  functions: {
    availableSkillPoints(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseRarityScore(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rarityScore_: BigNumber }>;

    claimTokenatxor(
      _tokenId: BigNumberish,
      _option: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentProduction(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber, string, number] & {
          productionMaxSize: BigNumber;
          productionPrice: BigNumber;
          bodyColor: string;
          totalCount: number;
        }
      ] & {
        productionId_: BigNumber;
        production_: [BigNumber, BigNumber, string, number] & {
          productionMaxSize: BigNumber;
          productionPrice: BigNumber;
          bodyColor: string;
          totalCount: number;
        };
      }
    >;

    getNumericTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number, number, number, number]] & {
        numericTraits_: [number, number, number, number, number, number];
      }
    >;

    interact(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifiedTraitsAndRarityScore(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number, number, number, number], BigNumber] & {
        numericTraits_: [number, number, number, number, number, number];
        rarityScore_: BigNumber;
      }
    >;

    productionTokenatxorTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          }
        ]
      ] & {
        productionTokenatxorTraits_: [
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          },
          [
            BigNumber,
            [number, number, number, number, number, number],
            string,
            BigNumber
          ] & {
            randomNumber: BigNumber;
            numericTraits: [number, number, number, number, number, number];
            collateralType: string;
            minimumStake: BigNumber;
          }
        ];
      }
    >;

    rarityMultiplier(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { multiplier_: BigNumber }>;

    revenueShares(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string] & {
          burnAddress: string;
          daoAddress: string;
          rarityFarming: string;
          artists: string;
        }
      ]
    >;

    setTokenatxorName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spendSkillPoints(
      _tokenId: BigNumberish,
      _values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tktrAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { contract_: string }>;

    tokenIdsWithWisdom(
      _owner: string,
      _count: BigNumberish,
      _skip: BigNumberish,
      all: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          wisdom: BigNumber;
          lastInteracted: BigNumber;
        })[]
      ] & {
        tokenIdsWithWisdom_: ([BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          wisdom: BigNumber;
          lastInteracted: BigNumber;
        })[];
      }
    >;

    tokenatxorNameAvailable(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available_: boolean }>;

    tokenatxorPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { level_: BigNumber }>;

    wisdom(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { score_: BigNumber }>;

    xpUntilNextPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredXp_: BigNumber }>;
  };

  availableSkillPoints(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseRarityScore(
    _numericTraits: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimTokenatxor(
    _tokenId: BigNumberish,
    _option: BigNumberish,
    _stakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentProduction(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber, BigNumber, string, number] & {
        productionMaxSize: BigNumber;
        productionPrice: BigNumber;
        bodyColor: string;
        totalCount: number;
      }
    ] & {
      productionId_: BigNumber;
      production_: [BigNumber, BigNumber, string, number] & {
        productionMaxSize: BigNumber;
        productionPrice: BigNumber;
        bodyColor: string;
        totalCount: number;
      };
    }
  >;

  getNumericTraits(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number, number, number]>;

  interact(
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifiedTraitsAndRarityScore(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number, number, number, number], BigNumber] & {
      numericTraits_: [number, number, number, number, number, number];
      rarityScore_: BigNumber;
    }
  >;

  productionTokenatxorTraits(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      },
      [
        BigNumber,
        [number, number, number, number, number, number],
        string,
        BigNumber
      ] & {
        randomNumber: BigNumber;
        numericTraits: [number, number, number, number, number, number];
        collateralType: string;
        minimumStake: BigNumber;
      }
    ]
  >;

  rarityMultiplier(
    _numericTraits: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  revenueShares(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      burnAddress: string;
      daoAddress: string;
      rarityFarming: string;
      artists: string;
    }
  >;

  setTokenatxorName(
    _tokenId: BigNumberish,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spendSkillPoints(
    _tokenId: BigNumberish,
    _values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tktrAddress(overrides?: CallOverrides): Promise<string>;

  tokenIdsWithWisdom(
    _owner: string,
    _count: BigNumberish,
    _skip: BigNumberish,
    all: boolean,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber] & {
      tokenId: BigNumber;
      wisdom: BigNumber;
      lastInteracted: BigNumber;
    })[]
  >;

  tokenatxorNameAvailable(
    _name: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenatxorPowerLevel(
    _experience: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wisdom(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  xpUntilNextPowerLevel(
    _experience: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    availableSkillPoints(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseRarityScore(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokenatxor(
      _tokenId: BigNumberish,
      _option: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentProduction(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber, string, number] & {
          productionMaxSize: BigNumber;
          productionPrice: BigNumber;
          bodyColor: string;
          totalCount: number;
        }
      ] & {
        productionId_: BigNumber;
        production_: [BigNumber, BigNumber, string, number] & {
          productionMaxSize: BigNumber;
          productionPrice: BigNumber;
          bodyColor: string;
          totalCount: number;
        };
      }
    >;

    getNumericTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number, number, number]>;

    interact(
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    modifiedTraitsAndRarityScore(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number, number, number, number], BigNumber] & {
        numericTraits_: [number, number, number, number, number, number];
        rarityScore_: BigNumber;
      }
    >;

    productionTokenatxorTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        },
        [
          BigNumber,
          [number, number, number, number, number, number],
          string,
          BigNumber
        ] & {
          randomNumber: BigNumber;
          numericTraits: [number, number, number, number, number, number];
          collateralType: string;
          minimumStake: BigNumber;
        }
      ]
    >;

    rarityMultiplier(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueShares(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        burnAddress: string;
        daoAddress: string;
        rarityFarming: string;
        artists: string;
      }
    >;

    setTokenatxorName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    spendSkillPoints(
      _tokenId: BigNumberish,
      _values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    tktrAddress(overrides?: CallOverrides): Promise<string>;

    tokenIdsWithWisdom(
      _owner: string,
      _count: BigNumberish,
      _skip: BigNumberish,
      all: boolean,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        wisdom: BigNumber;
        lastInteracted: BigNumber;
      })[]
    >;

    tokenatxorNameAvailable(
      _name: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenatxorPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wisdom(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xpUntilNextPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ClaimTokenatxor(uint256)"(
      _tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _tokenId: BigNumber }>;

    ClaimTokenatxor(
      _tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { _tokenId: BigNumber }>;

    "LockTokenatxor(uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      _time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _time: BigNumber }
    >;

    LockTokenatxor(
      _tokenId?: BigNumberish | null,
      _time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _time: BigNumber }
    >;

    "SetBatchId(uint256,uint256[])"(
      _batchId?: BigNumberish | null,
      tokenIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { _batchId: BigNumber; tokenIds: BigNumber[] }
    >;

    SetBatchId(
      _batchId?: BigNumberish | null,
      tokenIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { _batchId: BigNumber; tokenIds: BigNumber[] }
    >;

    "SetTokenatxorName(uint256,string,string)"(
      _tokenId?: BigNumberish | null,
      _oldName?: null,
      _newName?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenId: BigNumber; _oldName: string; _newName: string }
    >;

    SetTokenatxorName(
      _tokenId?: BigNumberish | null,
      _oldName?: null,
      _newName?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenId: BigNumber; _oldName: string; _newName: string }
    >;

    "SpendSkillpoints(uint256,int16[4])"(
      _tokenId?: BigNumberish | null,
      _values?: null
    ): TypedEventFilter<
      [BigNumber, [number, number, number, number]],
      { _tokenId: BigNumber; _values: [number, number, number, number] }
    >;

    SpendSkillpoints(
      _tokenId?: BigNumberish | null,
      _values?: null
    ): TypedEventFilter<
      [BigNumber, [number, number, number, number]],
      { _tokenId: BigNumber; _values: [number, number, number, number] }
    >;

    "UnLockTokenatxor(uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      _time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _time: BigNumber }
    >;

    UnLockTokenatxor(
      _tokenId?: BigNumberish | null,
      _time?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _tokenId: BigNumber; _time: BigNumber }
    >;
  };

  estimateGas: {
    availableSkillPoints(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseRarityScore(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokenatxor(
      _tokenId: BigNumberish,
      _option: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentProduction(overrides?: CallOverrides): Promise<BigNumber>;

    getNumericTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interact(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifiedTraitsAndRarityScore(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productionTokenatxorTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityMultiplier(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenueShares(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenatxorName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spendSkillPoints(
      _tokenId: BigNumberish,
      _values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tktrAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdsWithWisdom(
      _owner: string,
      _count: BigNumberish,
      _skip: BigNumberish,
      all: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenatxorNameAvailable(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenatxorPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wisdom(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xpUntilNextPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableSkillPoints(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseRarityScore(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokenatxor(
      _tokenId: BigNumberish,
      _option: BigNumberish,
      _stakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentProduction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumericTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interact(
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifiedTraitsAndRarityScore(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productionTokenatxorTraits(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarityMultiplier(
      _numericTraits: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokenatxorName(
      _tokenId: BigNumberish,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spendSkillPoints(
      _tokenId: BigNumberish,
      _values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tktrAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdsWithWisdom(
      _owner: string,
      _count: BigNumberish,
      _skip: BigNumberish,
      all: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenatxorNameAvailable(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenatxorPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wisdom(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xpUntilNextPowerLevel(
      _experience: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
